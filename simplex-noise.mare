@@  Ported to TinyMARE 2017-03-22 - QBFreak
@@   * See http://staffwww.itn.liu.se/~stegu/simplexnoise/SimplexNoise.java for the original code this is based on
@@ 
@@  A speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.
@@ 
@@  Based on example code by Stefan Gustavson (stegu@itn.liu.se).
@@  Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).
@@  Better rank ordering method for 4D by Stefan Gustavson in 2012.
@@ 
@@  This could be speeded up even further, but it's useful as it is.
@@ 
@@  Version 2012-03-09
@@ 
@@  This code was placed in the public domain by its original author,
@@  Stefan Gustavson. You may use it as you see fit, but
@@  attribution is appreciated.
@@ 
@@ 

@addparent2 Simplex Noise=Extended Register Parent

@defattr Simplex Noise/grad3data=inherit function
@defattr Simplex Noise/grad3=inherit function
@defattr Simplex Noise/pdata=inherit function
@defattr Simplex Noise/p=inherit function
@defattr Simplex Noise/perm=inherit function
@defattr Simplex Noise/permMod12=inherit function
@defattr Simplex Noise/F2=inherit function
@defattr Simplex Noise/G2=inherit function
@defattr Simplex Noise/F3=inherit Function
@defattr Simplex Noise/G3=inherit function
@defattr Simplex Noise/F4=inherit function
@defattr Simplex Noise/G4=inherit function
@defattr Simplex Noise/dot=inherit function
@defattr Simplex Noise/noise=inherit function
@defattr Simplex Noise/noise2D=inherit function
@defattr Simplex Noise/noise3D=inherit function
@defattr Simplex Noise/noise4D=inherit function

@set Simplex Noise=grad3data:1,1,0 -1,1,0 1,-1,0 -1,-1,0 1,0,1 -1,0,1 1,0,-1 -1,0,-1 0,1,1 0,-1,1 0,1,-1 0,-1,-1
@set Simplex Noise=grad3:[setq(2,extract(grad3data(),inc(v(0)),1))][ifelse(wcount(v(1)),ifelse(isnum(v(1)),extract(v(2),inc(v(1)),1,{,}),extract(v(2),switch(v(1),x,1,y,2,z,3,0),1,{,})),v(2))]
@set Simplex Noise=pdata
@set Simplex Noise=p:[extract(pdata(),inc(v(0)),1)]
@set Simplex Noise=perm:[p(band(v(0),255))]
@set Simplex Noise=permMod12:[mod(perm(v(0)),12)]

@@	Skewing and unskewing factors for 2 and 3 dimensions
@set Simplex Noise=F2:[fmul(5,fsub(sqrt(3),1))]
@set Simplex Noise=G2:[fdiv(fsub(3,sqrt(3))6)]
@set Simplex Noise=F3:[fdiv(1,3)]
@set Simplex Noise=G3:[fdiv(1,6)]
@set Simplex Noise=F4:[fdiv(fsub(sqrt(5),1),4)]
@set Simplex Noise=G4:[fdiv(fsub(5,sqrt(5)),20)]

@@ 0=gradient, 1=x, 2=y, 3=z, 4=w (4D ready)
@set Simplex Noise=dot:[fadd(fadd(fadd(fmul(iftrue(first(v(0),{,}),0),iftrue(v(1),0)),fmul(iftrue(extract(v(0),2,1,{,}),0),iftrue(v(2),0))),fmul(iftrue(extract(v(0),3,1,{,}),0),iftrue(v(3),0))),fmul(iftrue(extract(v(0),4,1,{,}),0),iftrue(v(4),0)))]

@@ 0=x, 1=y, [2=z, [3=w]]
@set Simplex Noise=noise:[ifelse(land(isnum(v(0)),match(setr(9,foreach(lnum(9),[iftrue(isnum(v(inc(v(0)))),ifelse(wcount(v(inc(v(0)))),-1,0))])),1 ? ? 0 0 0 0 0 0)),switch(inc(wcount(matchall(v(9),1))),2,noise2d(v(0),v(1)),3,noise3d(v(0),v(1),v(2)),4,noise4d(v(0),v(1),v(2),v(3))),#-1 Noise requires 2-4 arguments.)]
@@ 0=xin, 1=yin
@@	Internal: 9=Extended registers
@set Simplex Noise=noise2D:[setq(9,es(,xin,v(0)))][setq(9,es(v(9),yin,v(1)))][setq(9,es(v(9),s,fmul(fadd(v(0),v(1)),F2())))][setq(9,es(v(9),i,floor(fadd(v(0),ev(v(9),s)))))][setq(9,es(v(9),j,floor(fadd(v(1),ev(v(9),s)))))][setq(9,es(v(9),t,fmul(fadd(ev(v(9),i),ev(v(9),j)),G2())))][setq(9,es(v(9),X0_,fsub(ev(v(9),i),ev(v(9),t))))][setq(9,es(v(9),Y0_,fsub(ev(v(9),j),ev(v(9),t))))][setq(9,es(v(9),x0,fsub(v(0),ev(v(9),X0_))))][setq(9,es(v(9),y0,fsub(v(1),ev(v(9),Y0_))))][setq(9,es(v(9),i1,gt(ev(v(9),x0),ev(v(9),y0))))][setq(9,es(v(9),j1,not(ev(v(9),i1))))][setq(9,es(v(9),x1,fadd(fsub(ev(v(9),x0),ev(v(9),i1)),G2())))][setq(9,es(v(9),y1,fadd(fsub(ev(v(9),y0),ev(v(9),j1)),G2())))][setq(9,es(v(9),x2,fadd(fsub(ev(v(9),x0),1),fmul(2,G2()))))][setq(9,es(v(9),y2,fadd(fsub(ev(v(9),y0),1),fmul(2,G2()))))][setq(9,es(v(9),ii,band(ev(v(9),i),255)))][setq(9,es(v(9),jj,band(ev(v(9),j),255)))][setq(9,es(v(9),gi0,permMod12(fadd(ev(v(9),ii),perm(ev(v(9),jj))))))][setq(9,es(v(9),gi1,permMod12(fadd(ev(v(9),ii),fadd(ev(v(9),i1),perm(fadd(ev(v(9),jj),ev(v(9),i1))))))))][setq(9,es(v(9),gi2,permMod12(fadd(ev(v(9),ii),fadd(1,perm(fadd(ev(v(9),jj),1)))))))][setq(9,es(v(9),t0,fsub(0.5,fsub(pow(ev(v(9),x0),2),pow(ev(v(9),y0),2)))))][setq(9,es(v(9),n0,ifelse(lt(ev(v(9),t0),0),0,fmul(pow(ev(v(9),t0),2),dot(grad3(ev(v(9),gi0)),ev(v(9),x0),ev(v(9),y0))))))][setq(9,es(v(9),t0,ifelse(lt(ev(v(9),t0),0),ev(v(9),t0),pow(ev(v(9),t0),2))))][setq(9,es(v(9),t1,fsub(0.5,fsub(pow(ev(v(9),x1),2),pow(ev(v(9),y1),2)))))][setq(9,es(v(9),n1,ifelse(lt(ev(v(9),t1),0),0,fmul(pow(ev(v(9),t1),2),dot(grad3(ev(v(9),gi1)),ev(v(9),x1),ev(v(9),y1))))))][setq(9,es(v(9),t1,ifelse(lt(ev(v(9),t1),0),ev(v(9),t1),pow(ev(v(9),t1),2))))][setq(9,es(v(9),t2,fsub(0.5,fsub(pow(ev(v(9),x2),2),pow(ev(v(9),y2),2)))))][setq(9,es(v(9),n2,ifelse(lt(ev(v(9),t2),0),0,fmul(pow(ev(v(9),t2),2),dot(grad3(ev(v(9),gi2)),ev(v(9),x2),ev(v(9),y2))))))][setq(9,es(v(9),t2,ifelse(lt(ev(v(9),t2),0),ev(v(9),t2),pow(ev(v(9),t2),2))))][fmul(70,fadd(ev(v(9),n0),fadd(ev(v(9),n1),ev(v(9),n2))))]
	
@set Simplex Noise=noise3D:
@set Simplex Noise=noise4D:

#mupdate ignore
@@ Everything below this line will be ignored when loaded using the /load command from the TinyFugue script mupdate2.tf

@@ 2D Simplex noise has been implemented. 3D and 4D have not.
@@ The gradients for 4D will need to be ported over before 3D can be implemented

public class SimplexNoise {  // Simplex noise in 2D, 3D and 4D

  // 2D simplex noise
  public static double noise(double xin, double yin) {
    double n0, n1, n2; // Noise contributions from the three corners
    // Skew the input space to determine which simplex cell we're in
    double s = (xin+yin)*F2; // Hairy factor for 2D
    int i = fastfloor(xin+s);
    int j = fastfloor(yin+s);
    double t = (i+j)*G2;
    double X0 = i-t; // Unskew the cell origin back to (x,y) space
    double Y0 = j-t;
    double x0 = xin-X0; // The x,y distances from the cell origin
    double y0 = yin-Y0;
    // For the 2D case, the simplex shape is an equilateral triangle.
    // Determine which simplex we are in.
    int i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
    if(x0>y0) {i1=1; j1=0;} // lower triangle, XY order: (0,0)->(1,0)->(1,1)
    else {i1=0; j1=1;}      // upper triangle, YX order: (0,0)->(0,1)->(1,1)
    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and
    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
    // c = (3-sqrt(3))/6
    double x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
    double y1 = y0 - j1 + G2;
    double x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords
    double y2 = y0 - 1.0 + 2.0 * G2;
    // Work out the hashed gradient indices of the three simplex corners
    int ii = i & 255;
    int jj = j & 255;
    int gi0 = permMod12[ii+perm[jj]];
    int gi1 = permMod12[ii+i1+perm[jj+j1]];
    int gi2 = permMod12[ii+1+perm[jj+1]];
    // Calculate the contribution from the three corners
    double t0 = 0.5 - x0*x0-y0*y0;
    if(t0<0) n0 = 0.0;
    else {
      t0 *= t0;
      n0 = t0 * t0 * dot(grad3[gi0], x0, y0);  // (x,y) of grad3 used for 2D gradient
    }
    double t1 = 0.5 - x1*x1-y1*y1;
    if(t1<0) n1 = 0.0;
    else {
      t1 *= t1;
      n1 = t1 * t1 * dot(grad3[gi1], x1, y1);
    }
    double t2 = 0.5 - x2*x2-y2*y2;
    if(t2<0) n2 = 0.0;
    else {
      t2 *= t2;
      n2 = t2 * t2 * dot(grad3[gi2], x2, y2);
    }
    // Add contributions from each corner to get the final noise value.
    // The result is scaled to return values in the interval [-1,1].
    return 70.0 * (n0 + n1 + n2);
  }



  // 3D simplex noise
  public static double noise(double xin, double yin, double zin) {
    double n0, n1, n2, n3; // Noise contributions from the four corners
    // Skew the input space to determine which simplex cell we're in
    double s = (xin+yin+zin)*F3; // Very nice and simple skew factor for 3D
    int i = fastfloor(xin+s);
    int j = fastfloor(yin+s);
    int k = fastfloor(zin+s);
    double t = (i+j+k)*G3;
    double X0 = i-t; // Unskew the cell origin back to (x,y,z) space
    double Y0 = j-t;
    double Z0 = k-t;
    double x0 = xin-X0; // The x,y,z distances from the cell origin
    double y0 = yin-Y0;
    double z0 = zin-Z0;
    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.
    // Determine which simplex we are in.
    int i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords
    int i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords
    if(x0>=y0) {
      if(y0>=z0)
        { i1=1; j1=0; k1=0; i2=1; j2=1; k2=0; } // X Y Z order
        else if(x0>=z0) { i1=1; j1=0; k1=0; i2=1; j2=0; k2=1; } // X Z Y order
        else { i1=0; j1=0; k1=1; i2=1; j2=0; k2=1; } // Z X Y order
      }
    else { // x0<y0
      if(y0<z0) { i1=0; j1=0; k1=1; i2=0; j2=1; k2=1; } // Z Y X order
      else if(x0<z0) { i1=0; j1=1; k1=0; i2=0; j2=1; k2=1; } // Y Z X order
      else { i1=0; j1=1; k1=0; i2=1; j2=1; k2=0; } // Y X Z order
    }
    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),
    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and
    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where
    // c = 1/6.
    double x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
    double y1 = y0 - j1 + G3;
    double z1 = z0 - k1 + G3;
    double x2 = x0 - i2 + 2.0*G3; // Offsets for third corner in (x,y,z) coords
    double y2 = y0 - j2 + 2.0*G3;
    double z2 = z0 - k2 + 2.0*G3;
    double x3 = x0 - 1.0 + 3.0*G3; // Offsets for last corner in (x,y,z) coords
    double y3 = y0 - 1.0 + 3.0*G3;
    double z3 = z0 - 1.0 + 3.0*G3;
    // Work out the hashed gradient indices of the four simplex corners
    int ii = i & 255;
    int jj = j & 255;
    int kk = k & 255;
    int gi0 = permMod12[ii+perm[jj+perm[kk]]];
    int gi1 = permMod12[ii+i1+perm[jj+j1+perm[kk+k1]]];
    int gi2 = permMod12[ii+i2+perm[jj+j2+perm[kk+k2]]];
    int gi3 = permMod12[ii+1+perm[jj+1+perm[kk+1]]];
    // Calculate the contribution from the four corners
    double t0 = 0.6 - x0*x0 - y0*y0 - z0*z0;
    if(t0<0) n0 = 0.0;
    else {
      t0 *= t0;
      n0 = t0 * t0 * dot(grad3[gi0], x0, y0, z0);
    }
    double t1 = 0.6 - x1*x1 - y1*y1 - z1*z1;
    if(t1<0) n1 = 0.0;
    else {
      t1 *= t1;
      n1 = t1 * t1 * dot(grad3[gi1], x1, y1, z1);
    }
    double t2 = 0.6 - x2*x2 - y2*y2 - z2*z2;
    if(t2<0) n2 = 0.0;
    else {
      t2 *= t2;
      n2 = t2 * t2 * dot(grad3[gi2], x2, y2, z2);
    }
    double t3 = 0.6 - x3*x3 - y3*y3 - z3*z3;
    if(t3<0) n3 = 0.0;
    else {
      t3 *= t3;
      n3 = t3 * t3 * dot(grad3[gi3], x3, y3, z3);
    }
    // Add contributions from each corner to get the final noise value.
    // The result is scaled to stay just inside [-1,1]
    return 32.0*(n0 + n1 + n2 + n3);
  }


  // 4D simplex noise, better simplex rank ordering method 2012-03-09
  public static double noise(double x, double y, double z, double w) {

    double n0, n1, n2, n3, n4; // Noise contributions from the five corners
    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in
    double s = (x + y + z + w) * F4; // Factor for 4D skewing
    int i = fastfloor(x + s);
    int j = fastfloor(y + s);
    int k = fastfloor(z + s);
    int l = fastfloor(w + s);
    double t = (i + j + k + l) * G4; // Factor for 4D unskewing
    double X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
    double Y0 = j - t;
    double Z0 = k - t;
    double W0 = l - t;
    double x0 = x - X0;  // The x,y,z,w distances from the cell origin
    double y0 = y - Y0;
    double z0 = z - Z0;
    double w0 = w - W0;
    // For the 4D case, the simplex is a 4D shape I won't even try to describe.
    // To find out which of the 24 possible simplices we're in, we need to
    // determine the magnitude ordering of x0, y0, z0 and w0.
    // Six pair-wise comparisons are performed between each possible pair
    // of the four coordinates, and the results are used to rank the numbers.
    int rankx = 0;
    int ranky = 0;
    int rankz = 0;
    int rankw = 0;
    if(x0 > y0) rankx++; else ranky++;
    if(x0 > z0) rankx++; else rankz++;
    if(x0 > w0) rankx++; else rankw++;
    if(y0 > z0) ranky++; else rankz++;
    if(y0 > w0) ranky++; else rankw++;
    if(z0 > w0) rankz++; else rankw++;
    int i1, j1, k1, l1; // The integer offsets for the second simplex corner
    int i2, j2, k2, l2; // The integer offsets for the third simplex corner
    int i3, j3, k3, l3; // The integer offsets for the fourth simplex corner
    // [rankx, ranky, rankz, rankw] is a 4-vector with the numbers 0, 1, 2 and 3
    // in some order. We use a thresholding to set the coordinates in turn.
	// Rank 3 denotes the largest coordinate.
    i1 = rankx >= 3 ? 1 : 0;
    j1 = ranky >= 3 ? 1 : 0;
    k1 = rankz >= 3 ? 1 : 0;
    l1 = rankw >= 3 ? 1 : 0;
    // Rank 2 denotes the second largest coordinate.
    i2 = rankx >= 2 ? 1 : 0;
    j2 = ranky >= 2 ? 1 : 0;
    k2 = rankz >= 2 ? 1 : 0;
    l2 = rankw >= 2 ? 1 : 0;
    // Rank 1 denotes the second smallest coordinate.
    i3 = rankx >= 1 ? 1 : 0;
    j3 = ranky >= 1 ? 1 : 0;
    k3 = rankz >= 1 ? 1 : 0;
    l3 = rankw >= 1 ? 1 : 0;
    // The fifth corner has all coordinate offsets = 1, so no need to compute that.
    double x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords
    double y1 = y0 - j1 + G4;
    double z1 = z0 - k1 + G4;
    double w1 = w0 - l1 + G4;
    double x2 = x0 - i2 + 2.0*G4; // Offsets for third corner in (x,y,z,w) coords
    double y2 = y0 - j2 + 2.0*G4;
    double z2 = z0 - k2 + 2.0*G4;
    double w2 = w0 - l2 + 2.0*G4;
    double x3 = x0 - i3 + 3.0*G4; // Offsets for fourth corner in (x,y,z,w) coords
    double y3 = y0 - j3 + 3.0*G4;
    double z3 = z0 - k3 + 3.0*G4;
    double w3 = w0 - l3 + 3.0*G4;
    double x4 = x0 - 1.0 + 4.0*G4; // Offsets for last corner in (x,y,z,w) coords
    double y4 = y0 - 1.0 + 4.0*G4;
    double z4 = z0 - 1.0 + 4.0*G4;
    double w4 = w0 - 1.0 + 4.0*G4;
    // Work out the hashed gradient indices of the five simplex corners
    int ii = i & 255;
    int jj = j & 255;
    int kk = k & 255;
    int ll = l & 255;
    int gi0 = perm[ii+perm[jj+perm[kk+perm[ll]]]] % 32;
    int gi1 = perm[ii+i1+perm[jj+j1+perm[kk+k1+perm[ll+l1]]]] % 32;
    int gi2 = perm[ii+i2+perm[jj+j2+perm[kk+k2+perm[ll+l2]]]] % 32;
    int gi3 = perm[ii+i3+perm[jj+j3+perm[kk+k3+perm[ll+l3]]]] % 32;
    int gi4 = perm[ii+1+perm[jj+1+perm[kk+1+perm[ll+1]]]] % 32;
    // Calculate the contribution from the five corners
    double t0 = 0.6 - x0*x0 - y0*y0 - z0*z0 - w0*w0;
    if(t0<0) n0 = 0.0;
    else {
      t0 *= t0;
      n0 = t0 * t0 * dot(grad4[gi0], x0, y0, z0, w0);
    }
   double t1 = 0.6 - x1*x1 - y1*y1 - z1*z1 - w1*w1;
    if(t1<0) n1 = 0.0;
    else {
      t1 *= t1;
      n1 = t1 * t1 * dot(grad4[gi1], x1, y1, z1, w1);
    }
   double t2 = 0.6 - x2*x2 - y2*y2 - z2*z2 - w2*w2;
    if(t2<0) n2 = 0.0;
    else {
      t2 *= t2;
      n2 = t2 * t2 * dot(grad4[gi2], x2, y2, z2, w2);
    }
   double t3 = 0.6 - x3*x3 - y3*y3 - z3*z3 - w3*w3;
    if(t3<0) n3 = 0.0;
    else {
      t3 *= t3;
      n3 = t3 * t3 * dot(grad4[gi3], x3, y3, z3, w3);
    }
   double t4 = 0.6 - x4*x4 - y4*y4 - z4*z4 - w4*w4;
    if(t4<0) n4 = 0.0;
    else {
      t4 *= t4;
      n4 = t4 * t4 * dot(grad4[gi4], x4, y4, z4, w4);
    }
    // Sum up and scale the result to cover the range [-1,1]
    return 27.0 * (n0 + n1 + n2 + n3 + n4);
  }

  // Inner class to speed upp gradient computations
  // (In Java, array access is a lot slower than member access)
  private static class Grad
  {
    double x, y, z, w;

    Grad(double x, double y, double z)
    {
      this.x = x;
      this.y = y;
      this.z = z;
    }

    Grad(double x, double y, double z, double w)
    {
      this.x = x;
      this.y = y;
      this.z = z;
      this.w = w;
    }
  }
}