@@ 2D Terrain Parent v2 v2.1b
@@  Generate terrain values based on a noise function

@set 2D Terrain Parent v2=haven

@addparent2 2D Terrain Parent v2=2D Coordinate System Parent

@set 2D Terrain Parent v2=color:[terrain_color()]
@set 2D Terrain Parent v2=desc:[capstr(terrain_name())]


@@ Settings @@

@defattr 2D Terrain Parent v2/terrain_colormap=inherit function
@defattr 2D Terrain Parent v2/terrain_names=inherit function
@defattr 2D Terrain Parent v2/terrain_seed=inherit function


@@ Functions @@

@defattr 2D Terrain Parent v2/terrain_value=inherit function
@defattr 2D Terrain Parent V2/terrain_color=inherit function
@defattr 2D Terrain Parent V2/terrain_name=inherit function
@defattr 2D Terrain Parent V2/terrain_displayindex=inherit function


@@ Data @@

@@ This is where the generated terrain will be stored
@defattr 2D Terrain Parent v2/terrain


@@ Triggers @@


@@ SETTINGS - configurable per-planet @@

@@ @terrain_colormap and @terrain_names both need to contain the same number of
@@  entries, which should correspond with each other based on position
@@  For instance: if the first name is 'deep water' then the first color is
@@  likely b (dark blue). Please note that names that contain spaces should
@@  substitute a tilde for the space (deep~water) as these are space-delimited
@@  lists. These two lists can be overridden at the planetary (room) level
@@  without the need to change the parent.
@set 2D Terrain Parent v2=terrain_colormap:b b+ y g g+ w x+ r+
@set 2D Terrain Parent v2=terrain_names:deep~water water mud grass hills rocky mountains lava

@@ terrain_seed(<plane>)
@@  Note: once the DB gets up around 400,000 this might start overflowing,
@@  although noise3() doesn't cares about the signedness of the number, so it's
@@  not likely to be an issue.
@set 2D Terrain Parent v2=terrain_seed:[add(rest(num(room(me)),#),v(0))]
@@  This might be a dumb question, but why is this terrain_seed(<plane>)?
@@  What has <plane> got to do with it? Current usage (in terrain_value) ignores
@@  this extra param by invoking it as terrain_seed()


@@ Functions @@

@@ terrain_value([<object>])
@@  Return the value of the terrain for the coords at the invoker's current
@@  location (or the coords at the specified object's location). Value is in the
@@  range 1-wcount(terrain_names()) and is seeded based on terrain_seed()
@set 2D Terrain Parent V2=terrain_value:[setq(0,iftrue(v(0),v(#)))][inc(int(fmul(fdiv(fadd(noise3(planetox(plane(v(0))),planetoy(plane(v(0))),terrain_seed()),1),2),wcount(terrain_colormap()))))]

@@ terrain_color([object])
@@  Return the color value of the terrain for the coords at the invoker's
@@  current location (or the coords at the specified object's location).
@@  terrain_value() is used as an index to look the color value up from
@@  terrain_colormap()
@set 2D Terrain Parent V2=terrain_color:[setq(0,iftrue(v(0),v(#)))][extract(terrain_colormap(),terrain_value(v(0)),1)]

@@ terrain_name([object])
@@  Return the name value of the terrain for the coords at the invoker's
@@  current location (or the coords at the specified object's location).
@@  terrain_value() is used as an index to look the name value up from
@@  terrain_names()
@set 2D Terrain Parent V2=terrain_name:[setq(0,iftrue(v(0),v(#)))][edit(extract(terrain_names(),terrain_value(v(0)),1),~,{ })]

@@ terrain_displayindex(<index>)
@@  Return an ansi-formatted string of the terrain name, looked up by <index>
@set 2D Terrain Parent V2=terrain_displayindex:[ansi(extract(terrain_colormap(),v(0),1),capstr(extract(terrain_names(),v(0),1)))]

@@   I think --v is supposed to be v(0) not 0
@@echo [setq(1,0)][setq(3,8)][setq(4,0)][foreach(lnum(10),[setq(2,int(fmul(fdiv(fadd(noise3(planetox(v(0)),planetoy(v(1)),terrain_seed()),1),2),wcount(terrain_colormap()))))][setq(3,ifelse(lt(v(2),v(3)),v(2),v(3)))][setq(4,ifelse(gt(v(2),v(4)),v(2),v(4)))])][v(3)] [v(4)]
